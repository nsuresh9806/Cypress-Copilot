import * as vscode from 'vscode';
import AsyncOpenAI from "openai";
import configData from './config.json';

async function openAIcallStep(userApiKey: string, inputText: string): Promise<string> {

	try {
		const openai = new AsyncOpenAI({ apiKey: userApiKey });

		const getStepCodeAPIcall = await openai.chat.completions.create({
			model: configData['gpt_4_model'],
			messages: [
				{ role: "system", content: configData.system_prompt_code },
				{ role: "user", content: "for {feature} =" + configData.few_shot_assistant_feature_code },
				{ role: "assistant", content: "the example step definition javascript file is {step} = " + configData.few_shot_assistant_step_code },
				{
					role: "user", content: "for {feature} = " + inputText + "lets think step by step."
						+ "Step 1: Strictly follow exact syntax for importing page object class.follow lower came case name convention, "
						+ "The example syntax is - import {loginPage} from '@pages/LoginPage'"
						+ "Step 2 : Strictly Write multiple imports when importing more than one page object class. "
						+ "For example this is incorrect syntax - import { calcPage, compPage } from '@pages';"
						+ " and the correct syntax example is -import { calcPage } from '@pages/CalcPage'; "
						+ "import { compPage } from '@pages/CompPage';  "
						+ "Step 3 : do not include explanation"
						+ "your task is to write the code with step definitions for every scenario and the javascript file is {step} ="
				}
			],
			max_tokens: configData['gpt_max_tokens'],
			temperature: configData['gpt_temperature'],
			top_p: configData['gpt_top_p']
		});

		// Check if the response has valid content
		const result = (getStepCodeAPIcall.choices
			&& getStepCodeAPIcall.choices.length > 0
			&& getStepCodeAPIcall.choices[0].message
			&& getStepCodeAPIcall.choices[0].message.content)
			? getStepCodeAPIcall.choices[0].message.content
			: 'No response for getStepCodeAPIcall from OpenAI';

		console.log("OpenAI response for getStepCodeAPIcall:: " + JSON.stringify(getStepCodeAPIcall, null, 2));
		//console.log("OpenAI response for getStepCodeAPIcall:: " + result);
		return result;

	} catch (error: any) {
		return error.message;
	}

}

async function openAIcallPom(userApiKey: string, inputText: string): Promise<string> {

	const openai = new AsyncOpenAI({ apiKey: userApiKey });

	const getPomCodeAPIcall = await openai.chat.completions.create({
		model: configData['gpt_4_model'],
		messages: [
			{ role: "system", content: configData.system_prompt_code },
			{ role: "user", content: "for the {step} file =" + configData.few_shot_assistant_step_code },
			{ role: "assistant", content: "the page object class implementation is {page} = " + configData.few_shot_assistant_page_code },
			{
				role: "user", content: "lets think step by step."
					+ "Step 1 - Define all UI element methods along with selectors."
					+ "Step 2 - Write every UI interaction in UI method completely "
					+ "Step 3 -  Write complete implementation of every verification method."
					+ "Step 4 - In absence of any implementation details you must assume and write the code. You should not leave any method without complete implementation"
					+ "Step 5 - In the absence of application behavior or functionality , Assume most common application behavior/functionality "
					+ "Step 6 - Avoid leaving any placeholders; implement complete logic for each method"
					+ "Step 7 - Review the generated code thoroughly. Verify each step, and if any step is not followed, rewrite the code accordingly"
					+ "Step 8 - do not include explanation"
					//+ "Step 8 - Generate the response with only code"
					+ "for the given step file =" + inputText + "write the page object class implementation is {page} = "
			}
		],
		max_tokens: configData['gpt_max_tokens'],
		temperature: configData['gpt_temperature'],
		top_p: configData['gpt_top_p']
	});

	const result = (getPomCodeAPIcall.choices
		&& getPomCodeAPIcall.choices.length > 0
		&& getPomCodeAPIcall.choices[0].message
		&& getPomCodeAPIcall.choices[0].message.content) ? getPomCodeAPIcall.choices[0].message.content
		: 'No response for getPomCodeAPIcall from OpenAI';
    
	console.log("OpenAI response for getPomCodeAPIcall:: " + JSON.stringify(getPomCodeAPIcall, null, 2));
	//console.log("openai response for getPomCodeAPIcall::" + result);

	return result;
}

export async function activate(context: vscode.ExtensionContext) {

	let newPanel: vscode.WebviewPanel | undefined = undefined;

	console.log('Extension "Cypress_Cucumber_AI_Assistant" is now active!');

	// Command to store the API key
	const setApiKeyCommand = vscode.commands.registerCommand('ccaia.setApiKey', async () => {
		const apiKey = await vscode.window.showInputBox({ prompt: 'Enter your OpenAI API key', ignoreFocusOut: true, password: true });
		if (apiKey) {
			await context.secrets.store('openai-api-key', apiKey);
			vscode.window.showInformationMessage('API Key stored successfully.');
		}
	});

	const processtest = vscode.commands.registerCommand('ccaia.processTest', () => {
		// The code you place here will be executed every time your command is executed
		// Display a message box to the user
		//vscode.window.showInformationMessage('Hello VS code from Suresh Nettur - PT!');

		// Create and show panel
		let currentPanel = vscode.window.createWebviewPanel(
			'processTests',
			'process Tests',
			vscode.ViewColumn.One,
			{ enableScripts: true, }
		);

		// And set its HTML content
		currentPanel.webview.html = getWebviewContent();

		// handle receiving messages from the webview
		currentPanel.webview.onDidReceiveMessage(async message => {
			if (!currentPanel) {
				return;
			}

			switch (message.command) {
				case 'alert':
					//vscode.window.showInformationMessage('Hello VS code from Suresh Nettur - PT!');
					console.log('Input given:: ' + message.text);

					if (message.text.length === 0) {
						vscode.window.showErrorMessage(`Please enter a valid test.`);
						return;
					}

					let apiResponseforStep = "Step Code - Not Available.";
					let apiResponseforPom = "Pom Code - Not Available.";

					const apiKey = await context.secrets.get('openai-api-key');
					if (!apiKey) {
						vscode.window.showErrorMessage('API Key is not set. Please set it first.');
						return;
					}

					try {
						let result = await openAIcallStep(apiKey, message.text);
						//console.log('response from openai for openAIcallStep:: ' + result);

						if (result !== 'Failed to get a valid response from OpenAI.') {
							apiResponseforStep = result;
							apiResponseforPom = await openAIcallPom(apiKey, apiResponseforStep);
						}

						currentPanel.webview.postMessage({
							type: 'message', pomCode: apiResponseforPom, stepCode: apiResponseforStep
						});
					}
					catch (error: any) {
						console.error('Error calling OpenAI message:', error);
						vscode.window.showErrorMessage(`Failed to get response from OpenAI. ${error}`);
					}
					return;
			}

		}, undefined, context.subscriptions);

	});

	context.subscriptions.push(processtest);
	context.subscriptions.push(setApiKeyCommand);
}

function getWebviewContent() {
	return `<!DOCTYPE html>
  <html>
    <head>
        <style>
			table {
			font-family: arial, sans-serif;
			border-collapse: collapse;
			}
			
			td, th {
			border: 0px solid #dddddd;
			text-align: center;
			padding: 10px;
			}
        </style>
    </head>
	
	<body>

	<script type="text/javascript">

		const vscode = acquireVsCodeApi(); 

		function clearAll() {
			document.getElementById("txt").value = "";
			document.getElementById("pomCodeText").value = "";
			document.getElementById("stepCodeText").value = "";
		}

		function displayOut() {
			vscode.postMessage({command: "alert", text: document.getElementById("txt").value});
		}

	    // Handle the message inside the webview
        window.addEventListener("message", event => {
			document.getElementById("pomCodeText").value = event.data.pomCode;
			document.getElementById("stepCodeText").value = event.data.stepCode;
        });

	</script>

	<form>
  		<table style="width: 60%;">
    		<tr>
        		<th colspan="4"><h1>Cypress Cucumber AI Assistant</h1></th>
    		</tr>
    		<tr>
        		<th>Enter BDD Scenarios</th>
        		<th></th>
				<th>Page Object Class Code</th>
				<th>Step Definition Code</th>
		    </tr>
    		<tr>
        		<td>
					<textarea id="txt" rows="20" cols="40">Feature: Weather Check
						As a user, I want to check the current weather in my city.
						Scenario: Viewing today's weather
						When I enter "New York" in the weather search bar
						Then I should see the current temperature in "New York"
					</textarea></td>
				<td>
					<input type="button" onclick="displayOut()" value=" Generate Code ">
					<input type="button" onclick="clearAll()" value=" Clear ">
				</td>
				<td><textarea id="pomCodeText" rows="20" cols="40" readonly="readonly"></textarea></td>
				<td><textarea id="stepCodeText" rows="20" cols="40" readonly="readonly"></textarea></td>
    		</tr>
  		</table>
	</form>

</body>
</html>`;
}

// This method is called when your extension is deactivated
export function deactivate() { }
